// Copyright © 2021-2022 Andy Goryachev <andy@goryachev.com>
package goryachev.memsafecrypto.bc.salsa;
import goryachev.common.test.TF;
import goryachev.common.test.Test;
import goryachev.common.util.CKit;
import goryachev.common.util.Hex;
import goryachev.memsafecrypto.CByteArray;
import goryachev.memsafecrypto.TUtils;


/**
 * Tests SCrypt.
 */
public class TestScrypt
{
	public static void main(String[] args)
	{
		TF.run();
	}
	
	
	@Test
	public void testScrypt() throws Exception
	{
		String[] passwords =
		{
			"",
			"a",
			"abracadabra !$@!$% 馬鹿外人",
			
		};
			
		for(String password: passwords)
		{
			int N = 1024;
			int r = 8;
			int p = 32;
			int dkLen = 256/8;
			byte[] salt = TUtils.rnd(256/8);
			
			TF.print("password=", password, "N=", N, "r=", r, "p=", p, "dkLen=", dkLen, "salt=", Hex.toHexString(salt));

			byte[] pass = password == null ? null : password.getBytes(CKit.CHARSET_UTF8);
			
			CByteArray pw = CByteArray.readOnly(pass);
			CByteArray sa = CByteArray.readOnly(salt);
			
			// bc
			byte[] expected = org.bouncycastle.crypto.generators.SCrypt.generate(pass, salt, N, r, p, dkLen);
			
			// memsafe
			CByteArray res = goryachev.memsafecrypto.bc.SCrypt.generate(pw, sa, N, r, p, dkLen);
			
			TF.eq(res.toByteArray(), expected);
		}
	}
}
